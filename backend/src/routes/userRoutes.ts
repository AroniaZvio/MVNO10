import { Router } from "express";
import { prisma } from "../lib/prisma";              // –ø—É—Ç—å –æ—Ç src/routes/*
import { requireAuth } from "../middleware/auth";    // –ø—É—Ç—å –æ—Ç src/routes/*

const router = Router();

/**
 * –ü—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/users/me
 */
router.get("/me", requireAuth, async (req, res) => {
  try {
    const uid = (req as any).user?.uid as number;
    if (!uid) return res.status(401).json({ message: "Unauthorized" });

    const user = await prisma.user.findUnique({
      where: { id: uid },
      select: {
        id: true,
        email: true,
        role: true,
        isActive: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        balance: true
      }
    });

    if (!user) return res.status(404).json({ message: "User not found" });
    return res.json(user);
  } catch (e) {
    console.error(e);
    return res.status(500).json({ message: "Server error" });
  }
});

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * PUT /api/users/me
 */
router.put("/me", requireAuth, async (req, res) => {
  try {
    const uid = (req as any).user?.uid as number;
    if (!uid) return res.status(401).json({ message: "Unauthorized" });

    const { firstName, lastName } = req.body as {
      firstName?: string;
      lastName?: string;
    };

    const user = await prisma.user.update({
      where: { id: uid },
      data: { firstName, lastName },
      select: {
        id: true,
        email: true,
        role: true,
        isActive: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        balance: true
      }
    });

    return res.json(user);
  } catch (e) {
    console.error(e);
    return res.status(500).json({ message: "Server error" });
  }
});

/**
 * –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:
 * GET /api/users/me/dashboard
 *  - –ø—Ä–æ—Ñ–∏–ª—å
 *  - –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
 *  - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
 */
router.get("/me/dashboard", requireAuth, async (req, res) => {
  try {
    const uid = (req as any).user?.uid as number;
    if (!uid) return res.status(401).json({ message: "Unauthorized" });

    // –ø—Ä–æ—Ñ–∏–ª—å
    const me = await prisma.user.findUnique({
      where: { id: uid },
      select: {
        id: true,
        email: true,
        role: true,
        isActive: true,
        createdAt: true,
        updatedAt: true,
        firstName: true,
        lastName: true,
        username: true,
        balance: true
      }
    });

    // –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (–ø—ã—Ç–∞–µ–º—Å—è –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏: userId –∏ relation)
    let connectedNumbers: any[] = [];
    try {
      // –µ—Å–ª–∏ –≤ PhoneNumber –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ userId
      // @ts-ignore
      connectedNumbers = await prisma.phoneNumber.findMany({
        where: { userId: uid },
        orderBy: { id: "asc" }
      });
    } catch {}

    if (connectedNumbers.length === 0) {
      // –µ—Å–ª–∏ –≤ Prisma –æ–ø–∏—Å–∞–Ω–∞ relation user -> numbers
      try {
        const withNumbers = await prisma.user.findUnique({
          where: { id: uid },
          // @ts-ignore
          include: { numbers: true }
        });
        // @ts-ignore
        connectedNumbers = (withNumbers as any)?.numbers ?? [];
      } catch {}
    }

    // –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (—Å—Ç–∞—Ç—É—Å –∏–ª–∏ userId=null)
    let availableNumbers: any[] = [];
    try {
      // –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ status
      // @ts-ignore
      availableNumbers = await prisma.phoneNumber.findMany({
        where: { status: "available" },
        orderBy: { id: "asc" }
      });
    } catch {}

    if (availableNumbers.length === 0) {
      try {
        // @ts-ignore
        availableNumbers = await prisma.phoneNumber.findMany({
          where: { userId: null },
          orderBy: { id: "asc" }
        });
      } catch {}
    }

    return res.json({
      user: me,
      connectedNumbers,
      availableNumbers
    });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ message: "Server error" });
  }
});

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * GET /api/users/me/plan
 */
router.get("/me/plan", requireAuth, async (req, res) => {
  try {
    const uid = (req as any).user?.uid as number;
    console.log('üîç Getting plan for user:', uid);
    if (!uid) return res.status(401).json({ message: "Unauthorized" });

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPlan = await prisma.userPlan.findFirst({
      where: { 
        userId: uid,
        status: 'active'
      },
      include: {
        plan: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!userPlan) {
      return res.status(404).json({ message: "No active plan found" });
    }

    return res.json({
      id: userPlan.id,
      planId: userPlan.planId,
      planName: userPlan.plan.name,
      planDescription: userPlan.plan.description || '',
      planPrice: userPlan.plan.price.toString(),
      planDataMb: userPlan.plan.dataMb || 0,
      planMinutes: userPlan.plan.minutes || 0,
      planSms: userPlan.plan.sms || 0,
      connectedAt: userPlan.createdAt.toISOString(),
      status: userPlan.status
    });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ message: "Server error" });
  }
});

/**
 * –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * POST /api/users/me/plan
 */
router.post("/me/plan", requireAuth, async (req, res) => {
  try {
    const uid = (req as any).user?.uid as number;
    console.log('üîó Connecting plan for user:', uid);
    if (!uid) return res.status(401).json({ message: "Unauthorized" });

    const { planId } = req.body as { planId: number };
    console.log('üìã Plan ID to connect:', planId);
    if (!planId) {
      return res.status(400).json({ message: "planId is required" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const plan = await prisma.plan.findUnique({
      where: { id: planId }
    });

    if (!plan) {
      return res.status(404).json({ message: "Plan not found" });
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    await prisma.userPlan.updateMany({
      where: { 
        userId: uid,
        status: 'active'
      },
      data: { status: 'expired' }
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    const userPlan = await prisma.userPlan.create({
      data: {
        userId: uid,
        planId: planId,
        status: 'active'
      },
      include: {
        plan: true
      }
    });

    return res.json({
      id: userPlan.id,
      planId: userPlan.planId,
      planName: userPlan.plan.name,
      planDescription: userPlan.plan.description || '',
      planPrice: userPlan.plan.price.toString(),
      planDataMb: userPlan.plan.dataMb || 0,
      planMinutes: userPlan.plan.minutes || 0,
      planSms: userPlan.plan.sms || 0,
      connectedAt: userPlan.createdAt.toISOString(),
      status: userPlan.status
    });
  } catch (e) {
    console.error(e);
    return res.status(500).json({ message: "Server error" });
  }
});

export default router;
