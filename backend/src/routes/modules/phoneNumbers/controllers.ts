import { Request, Response } from 'express';
import * as svc from './service';

export async function getAll(_req: Request, res: Response) {
  const rows = await svc.list();
  res.json(rows);
}

// –ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è)
export async function listPublicSimple(_req: Request, res: Response) {
  try {
    const rows = await svc.listPublic();
    res.json(rows);
  } catch (error) {
    console.error('Database error, returning mock data:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    const mockData = [
      {
        id: 1,
        countryName: "–†–æ—Å—Å–∏—è",
        countryCode: "+7",
        category: "simple",
        mobileNumber: "9001234567",
        number800: null,
        connectionFee: 500,
        monthlyFee: 1000
      },
      {
        id: 2,
        countryName: "–°–®–ê",
        countryCode: "+1",
        category: "gold",
        mobileNumber: "5551234567",
        number800: null,
        connectionFee: 1500,
        monthlyFee: 2000
      },
      {
        id: 3,
        countryName: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
        countryCode: "+44",
        category: "vip",
        mobileNumber: "7701234567",
        number800: null,
        connectionFee: 10000,
        monthlyFee: 5000
      },
      {
        id: 4,
        countryName: "–°–®–ê",
        countryCode: "+1",
        category: "platinum",
        mobileNumber: null,
        number800: "8001234567",
        connectionFee: 8000,
        monthlyFee: 3000
      }
    ];
    res.json(mockData);
  }
}

export async function createOne(req: Request, res: Response) {
  try {
    const b = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!b.countryCode || !b.countryName) {
      return res.status(400).json({ message: 'countryCode –∏ countryName –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    if (!b.mobileNumber && !b.number800) {
      return res.status(400).json({ message: '–£–∫–∞–∂–∏—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–æ–º–µ—Ä 800' });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    const createData: any = {
      countryCode: b.countryCode,
      countryName: b.countryName,
      category: b.category || null,
      connectionFee: Number(b.connectionFee) || 0,
      monthlyFee: Number(b.monthlyFee) || 0,
      status: "available" // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    };

    // –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if (b.mobileNumber && b.mobileNumber.trim()) {
      createData.mobileNumber = b.mobileNumber.trim();
    }

    // –î–ª—è –Ω–æ–º–µ—Ä–∞ 800
    if (b.number800 && b.number800.trim()) {
      createData.number800 = b.number800.trim();
    }

    console.log('üîç Debug: Creating phone number with data:', createData);

    const row = await svc.create(createData);
    res.status(201).json(row);
    
  } catch (error: any) {
    console.error('‚ùå Error creating phone number:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Prisma
    if (error.code === 'P2002') {
      return res.status(400).json({ 
        message: '–ù–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        field: error.meta?.target?.[0] || 'unknown'
      });
    }
    
    res.status(500).json({ 
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞',
      error: error.message 
    });
  }
}

export async function updateOne(req: Request, res: Response) {
  const id = Number(req.params.id);
  const row = await svc.update(id, {
    countryCode: req.body.countryCode,
    countryName: req.body.countryName,
  category: req.body.category ?? undefined,
    mobileNumber: req.body.mobileNumber,
    number800: req.body.number800 ?? null,
    connectionFee: req.body.connectionFee !== undefined ? Number(req.body.connectionFee) : undefined,
    monthlyFee: req.body.monthlyFee !== undefined ? Number(req.body.monthlyFee) : undefined,
  });
  res.json(row);
}

export async function removeOne(req: Request, res: Response) {
  const id = Number(req.params.id);
  await svc.remove(id);
  res.json({ ok: true });
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export async function connectNumber(req: Request, res: Response) {
  try {
    const numberId = Number(req.params.id);
    const userId = (req as any).user?.uid;
    
    if (!userId) {
      return res.status(401).json({ message: 'Unauthorized' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
    const number = await svc.getById(numberId);
    if (!number) {
      return res.status(404).json({ message: 'Number not found' });
    }

    if (number.status !== 'available' && number.userId !== null) {
      return res.status(400).json({ message: 'Number is not available' });
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–º–µ—Ä –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const connectedNumber = await svc.connectToUser(numberId, userId);
    
    res.json({
      message: 'Number connected successfully',
      number: connectedNumber
    });
    
  } catch (error: any) {
    console.error('‚ùå Error connecting number:', error);
    res.status(500).json({ 
      message: 'Failed to connect number',
      error: error.message 
    });
  }
}
