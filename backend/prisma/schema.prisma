// === Generated by ChatGPT: Prisma schema (single User, Role enum, PhoneNumber) ===

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Roles for users
enum Role {
  USER
  ADMIN
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  passwordHash String
  username     String?       @unique
  balance      Int           @default(0)
  numbers      PhoneNumber[] // подключенные номера
  firstName    String?
  lastName     String?
  role         Role          @default(USER)
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // relations
  emailVerifyTokens EmailVerifyToken[]
  resetTokens       ResetToken[]
  subscriptions     Subscription[]
}

model PhoneNumber {
  id            Int      @id @default(autoincrement())
  countryCode   String
  countryName   String
  mobileNumber  String   @unique
  number800     String?
  category      String?
  status        String   @default("available") // available | connected
  connectionFee Int
  monthlyFee    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User?    @relation(fields: [userId], references: [id])
  userId        Int?
}

model Plan {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  dataMb      Int
  minutes     Int
  sms         Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subscriptions Subscription[]
}

// Email verification tokens
model EmailVerifyToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Password reset tokens (used by forgot/reset password flow)
model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// User subscriptions to plans
model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  planId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  status    String   @default("active") // active | cancelled | expired
  startDate DateTime @default(now())
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
