import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { userApi, billingApi } from '../../lib/api';
import DashboardNavigation from '../../components/DashboardNavigation';
import AvailableNumbersTable from '../../components/numbers/AvailableNumbersTable';
import { type AvailableNumber } from '../../hooks/useAvailableNumbers';

interface ConnectedNumber {
  id: number;
  mobileNumber?: string | null;
  number800?: string | null;
  countryName: string;
  countryCode: string;
  connectionFee: number;
  monthlyFee: number;
  status: string;
}

const ConnectedNumbers: React.FC = () => {
  const navigate = useNavigate();
  const [connectedNumbers, setConnectedNumbers] = useState<ConnectedNumber[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
  const handleConnect = (row: AvailableNumber) => {
    navigate('/connect-number', {
      state: {
        id: row.id,
        mobileNumber: row.mobileNumber,
        connectionFee: row.connectionFee,
        monthlyFee: row.monthlyFee,
        countryName: row.countryName,
        countryCode: row.countryCode
      }
    });
  };

  const handleRowClick = (row: AvailableNumber) => {
    // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å—Ç—Ä–æ–∫–µ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –Ω–æ–º–µ—Ä–∞
    handleConnect(row);
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
  const loadConnectedNumbers = async () => {
    try {
      const dashboardData = await userApi.getDashboard();
      setConnectedNumbers(dashboardData.connectedNumbers || []);
    } catch (error) {
      console.error("Failed to load connected numbers:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadConnectedNumbers();
  }, []);

  // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤
  useEffect(() => {
    const handleBalanceUpdate = () => {
      loadConnectedNumbers();
    };
    
    window.addEventListener('balance-updated', handleBalanceUpdate);
    return () => window.removeEventListener('balance-updated', handleBalanceUpdate);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
  const handleDisconnectNumber = async (phoneNumberId: number) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }

    try {
      const result = await billingApi.disconnectNumber(phoneNumberId);
      
      alert(`–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω! –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: $${(result.refundAmount / 100).toFixed(2)}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
      await loadConnectedNumbers();
      
    } catch (error: any) {
      console.error("Failed to disconnect number:", error);
      const errorMessage = error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞';
      alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const handleRefresh = async () => {
    setRefreshing(true);
    await loadConnectedNumbers();
    setRefreshing(false);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-slate-50">
        <DashboardNavigation />
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="text-center py-12">
            <div className="text-2xl mb-4">‚è≥</div>
            <div className="text-slate-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤...</div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-slate-50">
      <DashboardNavigation />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-slate-900">–ú–æ–∏ –Ω–æ–º–µ—Ä–∞</h1>
          <p className="text-slate-600 mt-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏</p>
        </div>

        {/* –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold text-slate-900">–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞</h2>
            <button
              onClick={handleRefresh}
              disabled={refreshing}
              className="px-4 py-2 text-sm bg-slate-100 hover:bg-slate-200 text-slate-700 rounded-lg transition-colors flex items-center gap-2 disabled:opacity-50"
            >
              <svg className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              {refreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
            </button>
          </div>

          {connectedNumbers.length > 0 ? (
            <div className="space-y-4">
              {connectedNumbers.map(n => (
                <div key={n.id} className="w-full grid grid-cols-[1fr_auto] items-center p-4 bg-slate-50 rounded-xl border border-slate-200">
                  <div className="flex items-center gap-4 min-w-0">
                    <div className="flex flex-col gap-1">
                      {n.mobileNumber && (
                        <div className="text-2xl font-mono font-bold" style={{color: '#0A7B75'}}>
                          {n.mobileNumber}
                        </div>
                      )}
                      {n.number800 && (
                        <div className="text-lg font-mono font-bold text-green-600">
                          800: {n.number800}
                        </div>
                      )}
                      {!n.mobileNumber && !n.number800 && (
                        <div className="text-lg font-medium text-slate-500">
                          –ù–æ–º–µ—Ä #{n.id}
                        </div>
                      )}
                    </div>
                    <div className="flex flex-col gap-1">
                      <span className="text-sm text-slate-500">{n.countryName} {n.countryCode}</span>
                      <div className="text-xs text-slate-400">
                        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${(n.connectionFee / 100).toFixed(2)} | 
                        –ï–∂–µ–º–µ—Å—è—á–Ω–æ: ${(n.monthlyFee / 100).toFixed(2)}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-3 justify-end">
                    <span className="px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      –ü–æ–¥–∫–ª—é—á–µ–Ω
                    </span>
                    <button
                      onClick={() => handleDisconnectNumber(n.id)}
                      className="px-3 py-1 text-xs font-medium border border-red-200 bg-white text-red-600 hover:bg-red-50 hover:border-red-300 transition-colors rounded-lg"
                      title="–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–æ–º–µ—Ä"
                    >
                      –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <div className="text-4xl mb-4">üì±</div>
              <div className="text-lg font-medium text-slate-700 mb-2">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤</div>
              <div className="text-slate-500 mb-6">
                –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞" –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
              </div>
              <div className="text-sm text-slate-400">
                üí° –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
              </div>
            </div>
          )}
        </div>

        {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ - —Ç–∞–±–ª–∏—Ü–∞ */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6 mt-8">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h2 className="text-xl font-semibold text-slate-900 mb-2">–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞</h2>
              <p className="text-slate-600">–ü–æ–∏—Å–∫ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞</p>
              <div className="mt-2 flex items-center gap-2 text-sm text-[#0A7B75]">
                <span className="text-lg">üí°</span>
                <span>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–∫–ª—é—á–∏—Ç—å" –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</span>
              </div>
            </div>
            <a
              href="/dashboard/available-numbers"
              className="px-4 py-2 text-sm bg-slate-100 hover:bg-slate-200 text-slate-700 rounded-lg transition-colors flex items-center gap-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
              </svg>
              –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            </a>
          </div>

          <AvailableNumbersTable
            onConnect={handleConnect}
            onRowClick={handleRowClick}
            className="shadow-sm"
          />
        </div>
      </div>
    </div>
  );
};

export default ConnectedNumbers;
